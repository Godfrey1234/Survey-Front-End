'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readJWT = exports.generateJWT = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

var _encrypt = require('./encrypt');

var _encrypt2 = _interopRequireDefault(_encrypt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const generateJWT = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (jwtDetails, pubData = {}, encSettings = {}, encData = {}, encDataKey = 'encData') {
    const jwtPayload = {
      public: pubData
    };

    jwtPayload[encDataKey] = yield _encrypt2.default.serializeEncr(encSettings, encData);

    const jwtDefaults = {
      algorithm: 'HS256',
      expiresIn: '12h'
    };

    const jwtParams = (0, _extends3.default)({}, jwtDetails);

    const iss = jwtParams.key;
    delete jwtParams.key;
    const { secret } = jwtParams;
    delete jwtParams.secret;

    return _jsonwebtoken2.default.sign({
      iss,
      data: jwtPayload
    }, secret, (0, _extends3.default)({}, jwtDefaults, jwtParams));
  });

  return function generateJWT(_x) {
    return _ref.apply(this, arguments);
  };
})();

const readJWT = (tokenStr, encSettings, encDataKey = 'encData') => {
  const tokenData = _jsonwebtoken2.default.decode(tokenStr);

  if (tokenData === null) throw new Error('Invalid JWT!');

  const publicData = _objectPath2.default.get(tokenData, 'data.public', {});
  const encryptedData = _objectPath2.default.get(tokenData, `data.${encDataKey}`, '');

  const newData = (0, _extends3.default)({}, publicData, _encrypt2.default.serializeDecr(encSettings, encryptedData));
  tokenData.data = newData;

  return tokenData;
};

exports.generateJWT = generateJWT;
exports.readJWT = readJWT;