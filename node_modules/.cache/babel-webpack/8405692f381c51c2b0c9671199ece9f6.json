{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport Swal from 'sweetalert2';\nlet LoginComponent = class LoginComponent {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router; //variable to store the selected radio button\n\n    this.answer = '';\n  }\n\n  ngOnInit() {}\n\n  onSubmit(data) {\n    // TODO: Use EventEmitter with form value\n    //console.warn(this.loginForm.value);\n\n    /*\r\n       const encryption = {\r\n         key: 'AAAAAAAAAAAAAA',\r\n         algorithm: 'aes-256-cbc',\r\n       };\r\n    \n      const jwtDetails = {\r\n         secret: '1234567890', // to sign the token\r\n         // Default values that will be automatically applied unless specified.\r\n         //algorithm: 'HS256',\r\n         //expiresIn: '12h',\r\n         //notBefore: '0s',\r\n         // Other optional values\r\n         key: 'ThisIsMyAppISS',// is used as ISS but can be named iss too\r\n     };*/\n    //Check if Selected Radio button is for student\n    if (this.answer == \"Student\") {\n      console.log(this.answer); //Retrieve Information from the database\n\n      this.http.post('http://localhost:3000/login', data, {\n        responseType: 'text'\n      }).subscribe(result => {\n        console.warn(\"result\", result);\n\n        if (result == \"incorrect username or password\" || result == \"Enter Values\") {\n          Swal.fire(result, '', 'warning');\n        } else {\n          /* const jwt = async()=> {\r\n             \r\n             const token = await jwtEncrypt.generateJWT(\r\n             this.answer,\r\n             encryption,\r\n             result\r\n           );}\r\n           //store the results using a token\r\n           localStorage.setItem(\"token\", result)\r\n          */\n          Swal.fire('Successfully Logged In!', '', 'success'); //Navigate to the Home page\n\n          this.router.navigate(['/home']);\n        }\n      });\n      console.warn(data);\n    } //Check if Selected Radio button is for Lecturer\n\n\n    if (this.answer == \"Lecturer\") {\n      console.log(this.answer); //Retrieve Information from the database\n\n      this.http.post('http://localhost:3000/lec_login', data, {\n        responseType: 'text'\n      }).subscribe(result => {\n        console.warn(\"result\", result);\n\n        if (result == \"incorrect username or password\" || result == \"Enter Values\") {\n          Swal.fire(result, '', 'warning');\n        } else {\n          //store the results using a token\n          localStorage.setItem(\"token\", result);\n          Swal.fire('Successfully Logged In!', '', 'success'); //Navigate to the Home page\n\n          this.router.navigate(['/lecture-home']);\n        }\n      });\n      console.warn(data);\n    } //Check if Selected Radio button is for Admin\n\n\n    if (this.answer == \"Admin\") {\n      console.log(this.answer); //Retrieve fronm database\n\n      this.http.post('http://localhost:3000/adminLogin', data, {\n        responseType: 'text'\n      }).subscribe(result => {\n        console.warn(\"result\", result);\n\n        if (result == \"incorrect username or password\" || result == \"Enter Values\") {\n          Swal.fire(result, '', 'warning'); //Navigate to the Admin  page\n        } else {\n          localStorage.setItem(\"token\", result);\n          Swal.fire('Successfully Logged In!', '', 'success');\n          this.router.navigate(['/admin']);\n        }\n      });\n      console.warn(data);\n    } //check if the radio button is clicked\n\n\n    if (this.answer == \"\") {\n      Swal.fire('Select Radio Button', '', 'error');\n    }\n  }\n\n};\n\n__decorate([Input()], LoginComponent.prototype, \"answer\", void 0);\n\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"sources":["C:\\Users\\sebet\\LBS\\LBS-front\\src\\app\\login\\login.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\r\n//import { FormGroup, FormControl, FormBuilder,Validators } from '@angular/forms';\r\n//import { IssueService } from '../issue.service';\r\nimport { Router, NavigationExtras } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport Swal from 'sweetalert2';\r\nimport * as jwtEncrypt from 'jwt-token-encrypt';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n\r\n\r\n  constructor(private http: HttpClient, private router: Router) { }\r\n  @Input()\r\n  //variable to store the selected radio button\r\n  answer = '';\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n\r\n  onSubmit(data) {\r\n    // TODO: Use EventEmitter with form value\r\n    //console.warn(this.loginForm.value);\r\n /*\r\n    const encryption = {\r\n      key: 'AAAAAAAAAAAAAA',\r\n      algorithm: 'aes-256-cbc',\r\n    };\r\n\r\n   const jwtDetails = {\r\n      secret: '1234567890', // to sign the token\r\n      // Default values that will be automatically applied unless specified.\r\n      //algorithm: 'HS256',\r\n      //expiresIn: '12h',\r\n      //notBefore: '0s',\r\n      // Other optional values\r\n      key: 'ThisIsMyAppISS',// is used as ISS but can be named iss too\r\n  };*/\r\n\r\n\r\n    //Check if Selected Radio button is for student\r\n    if (this.answer == \"Student\") {\r\n      console.log(this.answer);\r\n      //Retrieve Information from the database\r\n      this.http.post('http://localhost:3000/login', data, { responseType: 'text' })\r\n        .subscribe((result) => {\r\n          console.warn(\"result\", result)\r\n          if (result == \"incorrect username or password\" || result == \"Enter Values\") {\r\n            Swal.fire(\r\n              result,\r\n              '',\r\n              'warning'\r\n            )\r\n\r\n          } else {\r\n            /* const jwt = async()=> {\r\n               \r\n               const token = await jwtEncrypt.generateJWT(\r\n               this.answer,\r\n               encryption,\r\n               result\r\n             );}\r\n             //store the results using a token\r\n             localStorage.setItem(\"token\", result)\r\n            */\r\n            Swal.fire(\r\n\r\n              'Successfully Logged In!',\r\n              '',\r\n              'success'\r\n            )\r\n            //Navigate to the Home page\r\n            this.router.navigate(['/home']);\r\n          }\r\n\r\n        })\r\n      console.warn(data);\r\n    }\r\n    //Check if Selected Radio button is for Lecturer\r\n    if (this.answer == \"Lecturer\") {\r\n      console.log(this.answer);\r\n      //Retrieve Information from the database\r\n      this.http.post('http://localhost:3000/lec_login', data, { responseType: 'text' })\r\n        .subscribe((result) => {\r\n          console.warn(\"result\", result)\r\n          if (result == \"incorrect username or password\" || result == \"Enter Values\") {\r\n            Swal.fire(\r\n              result,\r\n              '',\r\n              'warning'\r\n            )\r\n\r\n          } else {\r\n\r\n            //store the results using a token\r\n            localStorage.setItem(\"token\",result);\r\n\r\n            Swal.fire(\r\n              'Successfully Logged In!',\r\n              '',\r\n              'success'\r\n            )\r\n            //Navigate to the Home page\r\n\r\n            this.router.navigate(['/lecture-home']);\r\n\r\n\r\n          }\r\n\r\n        })\r\n      console.warn(data);\r\n    }\r\n    //Check if Selected Radio button is for Admin\r\n    if (this.answer == \"Admin\") {\r\n      console.log(this.answer);\r\n\r\n      //Retrieve fronm database\r\n      this.http.post('http://localhost:3000/adminLogin', data, { responseType: 'text' })\r\n        .subscribe((result) => {\r\n          console.warn(\"result\", result)\r\n          if (result == \"incorrect username or password\" || result == \"Enter Values\") {\r\n            Swal.fire\r\n              (result,\r\n                '',\r\n                'warning'\r\n              )\r\n            //Navigate to the Admin  page\r\n\r\n\r\n          } else {\r\n            localStorage.setItem(\"token\", result)\r\n\r\n            Swal.fire(\r\n              'Successfully Logged In!',\r\n              '',\r\n              'success'\r\n            )\r\n\r\n            this.router.navigate(['/admin']);\r\n\r\n          }\r\n        })\r\n      console.warn(data);\r\n\r\n    }\r\n\r\n    //check if the radio button is clicked\r\n    if (this.answer == \"\") {\r\n      Swal.fire(\r\n        'Select Radio Button',\r\n        '',\r\n        'error'\r\n      )\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}