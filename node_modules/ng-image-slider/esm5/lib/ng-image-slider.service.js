/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-image-slider.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
var DESC = 'DESC';
/** @type {?} */
var ASC = 'ASC';
var NgImageSliderService = /** @class */ (function () {
    function NgImageSliderService() {
    }
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.isBase64 = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
        return base64regex.test(str);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.base64FileExtension = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.substring("data:image/".length, str.indexOf(";base64"));
    };
    /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    NgImageSliderService.prototype.orderArray = /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    function (arr, orderType) {
        if (arr === void 0) { arr = []; }
        if (orderType === void 0) { orderType = ASC; }
        if ((arr === null || arr === void 0 ? void 0 : arr.length) && orderType) {
            return arr.sort((/**
             * @param {?} ob1
             * @param {?} ob2
             * @return {?}
             */
            function (ob1, ob2) {
                if (ob1['order'] === null || !ob1['order']) {
                    return 1;
                }
                else if (ob2['order'] === null || !ob2['order']) {
                    return -1;
                }
                else if (ob1['order'] > ob2['order']) {
                    if (orderType === DESC) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
                else if (ob1['order'] < ob2['order']) {
                    if (orderType === DESC) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }
            }));
        }
        return arr;
    };
    NgImageSliderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgImageSliderService.ctorParameters = function () { return []; };
    return NgImageSliderService;
}());
export { NgImageSliderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1pbWFnZS1zbGlkZXIvIiwic291cmNlcyI6WyJsaWIvbmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQUVyQyxJQUFJLEdBQUcsTUFBTTs7SUFDZixHQUFHLEdBQUcsS0FBSztBQUVmO0lBR0k7SUFBZ0IsQ0FBQzs7Ozs7SUFFakIsdUNBQVE7Ozs7SUFBUixVQUFTLEdBQUc7O1lBQ0osV0FBVyxHQUFHLGtFQUFrRTtRQUNwRixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFakMsQ0FBQzs7Ozs7SUFFRCxrREFBbUI7Ozs7SUFBbkIsVUFBb0IsR0FBRztRQUNuQixPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQzs7Ozs7O0lBRUQseUNBQVU7Ozs7O0lBQVYsVUFBVyxHQUFRLEVBQUUsU0FBZTtRQUF6QixvQkFBQSxFQUFBLFFBQVE7UUFBRSwwQkFBQSxFQUFBLGVBQWU7UUFDaEMsSUFBSSxDQUFBLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxNQUFNLEtBQUksU0FBUyxFQUFFO1lBQzFCLE9BQU8sR0FBRyxDQUFDLElBQUk7Ozs7O1lBQUMsVUFBQyxHQUFHLEVBQUUsR0FBRztnQkFDckIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUN4QyxPQUFPLENBQUMsQ0FBQztpQkFDWjtxQkFDSSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQzdDLE9BQU8sQ0FBQyxDQUFDLENBQUM7aUJBQ2I7cUJBQ0ksSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNsQyxJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7d0JBQ3BCLE9BQU8sQ0FBQyxDQUFDLENBQUM7cUJBQ2I7eUJBQU07d0JBQ0gsT0FBTyxDQUFDLENBQUM7cUJBQ1o7aUJBQ0o7cUJBQ0ksSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUVsQyxJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7d0JBQ3BCLE9BQU8sQ0FBQyxDQUFDO3FCQUNaO3lCQUFNO3dCQUNILE9BQU8sQ0FBQyxDQUFDLENBQUM7cUJBQ2I7aUJBQ0o7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOztnQkExQ0osVUFBVTs7OztJQTJDWCwyQkFBQztDQUFBLEFBM0NELElBMkNDO1NBMUNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgREVTQyA9ICdERVNDJyxcbiAgICBBU0MgPSAnQVNDJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nSW1hZ2VTbGlkZXJTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBpc0Jhc2U2NChzdHIpIHtcbiAgICAgICAgdmFyIGJhc2U2NHJlZ2V4ID0gL14oWzAtOWEtekEtWisvXXs0fSkqKChbMC05YS16QS1aKy9dezJ9PT0pfChbMC05YS16QS1aKy9dezN9PSkpPyQvO1xuICAgICAgICByZXR1cm4gYmFzZTY0cmVnZXgudGVzdChzdHIpO1xuXG4gICAgfVxuXG4gICAgYmFzZTY0RmlsZUV4dGVuc2lvbihzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoXCJkYXRhOmltYWdlL1wiLmxlbmd0aCwgc3RyLmluZGV4T2YoXCI7YmFzZTY0XCIpKTtcbiAgICB9XG5cbiAgICBvcmRlckFycmF5KGFyciA9IFtdLCBvcmRlclR5cGUgPSBBU0MpIHtcbiAgICAgICAgaWYgKGFycj8ubGVuZ3RoICYmIG9yZGVyVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFyci5zb3J0KChvYjEsIG9iMikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvYjFbJ29yZGVyJ10gPT09IG51bGwgfHwgIW9iMVsnb3JkZXInXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2IyWydvcmRlciddID09PSBudWxsIHx8ICFvYjJbJ29yZGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvYjFbJ29yZGVyJ10gPiBvYjJbJ29yZGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVyVHlwZSA9PT0gREVTQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2IxWydvcmRlciddIDwgb2IyWydvcmRlciddKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJUeXBlID09PSBERVNDKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfVxufVxuIl19